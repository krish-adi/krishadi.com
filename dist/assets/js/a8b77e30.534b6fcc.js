"use strict";(self.webpackChunkkrishadi_com=self.webpackChunkkrishadi_com||[]).push([[748],{1125:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>c});var s=t(4848),i=t(8453);const a={slug:"/python",title:"Python Environments",description:"A quickstart to using and managing Python environments",published:"11/24/2021",last_update:{date:"1/26/2022"},tags:["zettelkasten"]},o="Python Environments",r={id:"python",title:"Python Environments",description:"A quickstart to using and managing Python environments",source:"@site/posts/01-python.md",sourceDirName:".",slug:"/python",permalink:"/posts/python",draft:!1,unlisted:!1,tags:[{inline:!1,label:"Zettelkasten",permalink:"/posts/tags/zettelkasten",description:"A collection of knokwledge I have gathered over the years. This is an attempt to capture them, primarily to serve as a reference for myself. However, I hope it is also useful to others."}],version:"current",lastUpdatedAt:16431516e5,sidebarPosition:1,frontMatter:{slug:"/python",title:"Python Environments",description:"A quickstart to using and managing Python environments",published:"11/24/2021",last_update:{date:"1/26/2022"},tags:["zettelkasten"]},sidebar:"postsSidebar",previous:{title:"Posts",permalink:"/posts/"},next:{title:"Understanding Rheology",permalink:"/posts/rheology"}},l={},c=[{value:"venv",id:"venv",level:2},{value:"pyenv",id:"pyenv",level:2},{value:"and more...",id:"and-more",level:2}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"python-environments",children:"Python Environments"}),"\n",(0,s.jsx)(n.p,{children:"Python has a nice progressive learning curve. It can be used in many ways, for many things. From quickly opening a dataset, and visualising it to writing heavy processing algorithms to running web-applications. Python could be your weapon of choice."}),"\n",(0,s.jsx)(n.p,{children:"A downside about Python is managing dependencies and conflicts between package versions. As libraries/packages mature, they tend to deprecate some features or mutate them. Making compatibility across package versions tricky. The best way to resolve this is to use a virtual environment. A virtual environment neatly bundles all the packages for your project with its compatible dependencies."}),"\n",(0,s.jsx)(n.p,{children:"So, here is my cheatsheet for managing Python environments. Most of the time I forget some of these commands and I need to scavenge the web for a particular command. So, I decided to put together a knowledge base here for my own reference."}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsx)(n.p,{children:"These commands were tested on a mac."})}),"\n",(0,s.jsx)(n.h2,{id:"venv",children:"venv"}),"\n",(0,s.jsxs)(n.p,{children:["Let's start with ",(0,s.jsx)(n.code,{children:"venv"}),". It comes pre installed in Python (3.5+). To create a virtual environment folder with name ",(0,s.jsx)(n.code,{children:"ENV_NAME"})," inside your project folder, use the following command:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"python -m venv ./ENV_NAME\n"})}),"\n",(0,s.jsxs)(n.p,{children:["I prefer installing all my virtual environments into a folder (example ",(0,s.jsx)(n.code,{children:"venv"}),") at the root of my system inside a folder with the name of the project."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"python -m venv ~/venv/PROJECT_NAME\n"})}),"\n",(0,s.jsx)(n.p,{children:"To activate the environment, you need to source it by running the command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"source ./ENV_NAME/bin/activate\n"})}),"\n",(0,s.jsx)(n.p,{children:"And, I always run this afterwards, since most of my projects depend on them."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"pip install --upgrade pip\npip install wheel\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The other problem of managing environments is also managing different versions of Python. And I find the best way to solve this along with virtual environments is to use ",(0,s.jsx)(n.code,{children:"pyenv"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"pyenv",children:"pyenv"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"pyenv"})," manages the installation of different versions of Python and also the different virtual environments."]}),"\n",(0,s.jsxs)(n.p,{children:["On a mac, installation of ",(0,s.jsx)(n.code,{children:"pyenv"})," is done using ",(0,s.jsx)(n.code,{children:"brew"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"brew install pyenv\nbrew install pyenv-virtualenv\n"})}),"\n",(0,s.jsxs)(n.p,{children:["After the installation, you will be instructed to add the following to the ",(0,s.jsx)(n.code,{children:"~/.bashrc"})," if you are using bash for your terminal or add it to ",(0,s.jsx)(n.code,{children:"~/.zshrc"})," if you are using zsh for your terminal (zsh is the new standard for macOS)."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:'# add to ~/.zshrc\neval "$(pyenv init -)"\neval "$(pyenv virtualenv-init -)"\n'})}),"\n",(0,s.jsx)(n.p,{children:"Installing a version of Python to your system is done by"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"pyenv install VERSION_NUMBER_OR_NAME\n"})}),"\n",(0,s.jsx)(n.p,{children:"To list all the available versions of Python that can be installed, run this command"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"pyenv install --list\n"})}),"\n",(0,s.jsx)(n.p,{children:"To create a virtual environment, you can sue the command"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"# creating a virtual environment\npyenv virtualenv PYTHON_VERSION ENVIRONMENT_NAME\n"})}),"\n",(0,s.jsx)(n.p,{children:"To activate or deactivate a virtual environment you can use"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"# activate or deactivate a virtual environment\npyenv activate ENVIRONMENT_NAME\npyenv deactivate\n"})}),"\n",(0,s.jsxs)(n.p,{children:["To list all the virtual environments and the Python versions installed in ",(0,s.jsx)(n.code,{children:"pyenv"})," you'd use"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"# lists all virtual environments and Python versions\npyenv versions\n\n# list all pyenv virtual environments\npyenv virtualenvs\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Coming to the best part of ",(0,s.jsx)(n.code,{children:"pyenv"})," is the ability to set the local and global Python version, this can be set so that opening a terminal in a folder will automatically activate the virtual environment."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"# setting for global\npyenv global ENVIRONMENT_NAME_OR_PYTHON_VERSION\n\n# setting for local, for a folder/project\npyenv local ENVIRONMENT_NAME_OR_PYTHON_VERSION\n"})}),"\n",(0,s.jsx)(n.p,{children:"To delete a virtual environment, you'd use this"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"# delete a virtual environment\npyenv virtualenv-delete ENVIRONMENT_NAME\n\n# this also work\npyenv uninstall ENVIRONMENT_NAME\n"})}),"\n",(0,s.jsx)(n.h2,{id:"and-more",children:"and more..."}),"\n",(0,s.jsxs)(n.p,{children:["There are several other Python project management tools. One that interests me is ",(0,s.jsx)(n.code,{children:"Poetry"}),". It helps with all of the above, and helps with managing multiple environments (dev, test, prod) for a particular project along with the ability to build and publish a package."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var s=t(6540);const i={},a=s.createContext(i);function o(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);